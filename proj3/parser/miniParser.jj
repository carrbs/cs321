/* *************************** 
 * Student: Benjamin Carr
 * carrbs@cs.pdx.edu
 *
 * proj3 (miniParser.jj)
 *
 *
 * ***************************/

PARSER_BEGIN(miniParser) 
package parser; 
import ast.*;
public class miniParser {}
PARSER_END(miniParser)

SKIP : /* WHITE SPACE */
{
  " "
  | "\t"
  | "\n"
  | "\r"
}

MORE : /* Comments */
{
 "//" : IN_SINGLE_LINE_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
 <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
 <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
 < ~[] >
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
 < BOOLEAN: "boolean" >
| < CLASS: "class" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FLOAT: "float" >
| < IF: "if" >
| < INT: "int" >
| < LENGTH: "length" >
| < MAIN: "main" >
| < NEW: "new" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < PRINT_LINE: "System.out.println" >
| < STATIC: "static" >
| < THIS: "this" >
| < TRUE: "true" >
| < VOID: "void" >
| < WHILE: "while" >
| < STRING: "String" >
}


TOKEN : /* IDs and Numbers */
{
  < #DIGIT: ["0"-"9"] > 
| < #LETTER: ["A"-"Z"] | ["a"-"z"] > 
| < ID: <LETTER> (<LETTER> | <DIGIT>)* > 
  {
        if (matchedToken.image.length() > 255)
            throw new TokenMgrError("Lexical error at line "
            + matchedToken.beginLine + ", column " + matchedToken.beginColumn + ".  Id length over 255", 0);
  }
| < INTVAL: (<DIGIT>)+ >
  {
        if (Long.valueOf(matchedToken.image) > 2147483647)
            throw new TokenMgrError("Lexical error at line "
            + matchedToken.beginLine + ", column " + matchedToken.beginColumn + ".  Integer value over 2^31-1", 0);
  }
| < REAL: (((<DIGIT>)* "." (<DIGIT>)+) ("f" | "F")) | (((<DIGIT>)+ "." (<DIGIT>)*) ("f" | "F")) >
}

TOKEN : /* Delimiters & Operators */ 
{
 < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < COMMA: "," >
| < ASSIGNMENT: "=" >
| < SEMICOLON: ";" >
| < OR: "||" >
| < AND: "&&" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULTIPLY: "*" >
| < DIVIDE: "/" >
| < PERIOD: "." >
| < NOT: "!" >
| < EQUAL: "==" >
| < NOT_EQUAL: "!=" >
| < LESS_THAN: "<" >
| < LESS_THAN_OR_EQUAL: "<=" >
| < GREATER_THAN: ">" >
| < GREATER_THAN_OR_EQUAL: ">=" >
}

TOKEN: /* String Literal */
{
 < STRING_LITERAL : "\"" ( ~["\r", "\n", "\""])* "\"" >
 { 
    if (matchedToken.image.length() > 257) 
        throw new TokenMgrError("Lexical error at line "
        + matchedToken.beginLine + ", column " + matchedToken.beginColumn + ". String length over 255", 0);
 }
}

// Program    -> ClassDecl {ClassDecl}
Program Program() :
{ ClassDecl c; ClassDeclList cl = new ClassDeclList(); }
{
    c = ClassDecl() { cl.add(c); } ( c=ClassDecl() { cl.add(c); })* <EOF>
    { return new Program(cl); }
}

// ClassDecl  -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
ClassDecl ClassDecl() :
{   Token tkn; Id ci; Id pi = null; 
    VarDecl v;
    MethodDecl m;
    VarDeclList avl = new VarDeclList(); 
    MethodDeclList aml = new MethodDeclList();
}
{
    <CLASS> tkn=<ID>{ ci = new Id(tkn.toString()); }
    [ <EXTENDS> <ID>{ pi = new Id(tkn.toString()); } ]
    <LBRACE> ( v = VarDecl() { avl.add(v); } )* 
    ( m = MethodDecl() { aml.add(m); })* <RBRACE>
    { return new ClassDecl(ci, pi, avl, aml); }
}

// MethodDecl -> "public" ( (Type | "void") <ID> '(' [Formals] ')' 
//                      | "static" "void" "main" '(' "String" '[' ']' <ID> ')' )
//                                       '{' {VarDecl} {Statement} '}'
MethodDecl MethodDecl() :
{
    Type at = null; Token tkn; Id i = null; 
    FormalList afl = null; 
    VarDecl v; VarDeclList avl = null;
    Stmt s; StmtList asl = null;
}
{
    <PUBLIC> ( (at = Type() | <VOID>) tkn=<ID>{ i = new Id(tkn.toString()); }
    <LPAREN> [afl = Formals()] <RPAREN> 
    |
    <STATIC> <VOID> <MAIN> <LPAREN> <STRING> <LBRACKET> <RBRACKET> <ID>
    <RPAREN>)
    <LBRACE> ( LOOKAHEAD(2) v = VarDecl() { avl.add(v); } )* ( s = Statement() {
    asl.add(s); } )* <RBRACE>
    { return new MethodDecl(at, i, afl, avl, asl); }
}

// Formals    -> Type <ID> {"," Type <ID>}
FormalList Formals() : 
{FormalList afl = new FormalList(); Formal f; Type t; Id i; Token tkn; }
{
    t = Type() tkn=<ID>{ i = new Id(tkn.toString()); f = new Formal(t, i);
    afl.add(f); } 
    ( <COMMA> t = Type() tkn=<ID>{ i = new Id(tkn.toString()); f = new Formal(t,
    i); afl.add(f); } )*
    { return afl; }

}

// VarDecl    -> Type <ID> ["=" InitExpr] ";"
VarDecl VarDecl() : 
{ Type t; Token tkn; Id i; Exp e = null;}
{
    t = Type() tkn=<ID>{ i = new Id(tkn.toString()); } 
    [ <ASSIGNMENT> e = InitExpr() ] <SEMICOLON>
    { return new VarDecl(t, i, e); }
}

// Type       -> BasicType ["[" "]"] | <ID>
Type Type() :
{ Type t; boolean isArray = false; Token tkn; Id i; }
{
    t = BasicType() [<LBRACKET> <RBRACKET> { isArray = true;}] 
    {
        if (isArray) 
            return new ArrayType(t); 
        else return t;
    }
|
    tkn=<ID>{ i = new Id(tkn.toString()); return new ObjType(i); }
}

// BasicType  -> "int" | "float" | "boolean"
Type BasicType() :
{}
{
    <INT>
    { return new BasicType(BasicType.Int); }
|
    <FLOAT>
    { return new BasicType(BasicType.Float); }
|
    <BOOLEAN>
    { return new BasicType(BasicType.Bool); }
}

// Statement  -> "{" {Statement} "}"
//            |  Lvalue ('=' InitExpr | '(' [Args] ')') ';'
//            |  "if" "(" Expr ")" Statement ["else" Statement]
//            |  "while" "(" Expr ")" Statement
//            |  "System.out.println" "(" [Expr | <STRVAL>] ")" ";"
//            |  "return" [Expr] ";"
Stmt Statement() :
{ 
    boolean isAssign = false; 
    Exp ex = null, ex2 = null; 
    StmtList asl = null; 
    Stmt s1 = null, s2 = null; 
    StrVal sv = null;
    ExpList a = null;
    Token tkn;
}
{
    <LBRACE> ( s1 = Statement(){ asl.add(s1); } )* <RBRACE>
    { return new Block(asl); }
|
    ex = Lvalue() (<ASSIGNMENT> ex2 = InitExpr(){isAssign = true;} 
        | <LPAREN> [a = Args()] <RPAREN>) <SEMICOLON>
    {
        if (isAssign)
            return new Assign(ex, ex2);
        else
        {
            if (ex instanceof Id)
            {
                Id foo = (Id) ex;
                return new CallStmt(new This(), foo, a);
            }
            else if (ex instanceof Field)
            {
                Field foo = (Field) ex;
                return new CallStmt(foo.obj, foo.var, a);
            }
            else return null;
        }
    }
|
    <IF> <LPAREN> ex = Expr() <RPAREN> s1 = Statement() 
    [LOOKAHEAD(1) <ELSE> s2 = Statement()]
    { return new If(ex, s1, s2); }
|
    <WHILE> <LPAREN> ex = Expr() <RPAREN> s1 = Statement()
    { return new While(ex, s1); }
|
    <PRINT_LINE> <LPAREN> [ex = Expr() | tkn=<STRING_LITERAL>
    {
        String tmp = tkn.toString().replace("\"", "");
        sv = new StrVal(tmp);
    } ] <RPAREN> <SEMICOLON>
    {
        if (ex == null)
            return new Print(sv);
        else return new Print(ex);
    }
|
    <RETURN> [ ex = Expr() ] <SEMICOLON>
    { return new Return(ex); }
}

// Args       -> Expr {"," Expr}
ExpList Args() :
{ExpList ael = new ExpList(); Exp e;}
{
    e = Expr(){ ael.add(e); } ( <COMMA> e = Expr(){ ael.add(e); } )*
    { return ael; }
}

// InitExpr   -> "new" ( BasicType '[' <INTVAL> ']' | <ID> '(' [Args] ')' )
//            |  Expr
Exp InitExpr() :
{ 
    Type t = null; 
    Token tkn; 
    Exp ex; 
    ExpList el = null;
    boolean isArray = false; 
    int n = 0;
    Id i = null;
}
{
    <NEW> ( t = BasicType() <LBRACKET> tkn=<INTVAL>
    { n = Integer.parseInt(tkn.toString()); }
    <RBRACKET> { isArray = true; }
    |
    tkn=<ID>{ i = new Id(tkn.toString()); } <LPAREN> [el = Args()] <RPAREN>)
    {
        if (isArray == true)
            return new NewArray(t, n);
        else
            return new NewObj(i, el);
    }
|
    ex = Expr()
    { return ex; }
}

// Expr         -> AndExpr OrTail
Exp Expr() :
{ Exp e1, e2 = null;}
{
    e1=AndExpr() e2=OrTail(e1) 
    { return e2==null ? e1 : e2; }
}

// OrTail       -> [ "||"  AndExpr OrTail ]
Exp OrTail(Exp e0) :
{ Exp e1 = null, e2 = null;}
{
    [ <OR> e1=AndExpr() { e1 = new Binop(Binop.OR, e0, e1); } e2=OrTail(e1) ]
    { return e2==null ? e1 : e2; }
}

// AndExpr    -> RelExpr AndTail
Exp AndExpr() :
{ Exp e1, e2 = null;}
{
    e1=RelExpr() e2=AndTail(e1) 
    { return e2==null ? e1 : e2; }
}

// AndTail()    -> [ "&&" RelExpr AndTail ]
Exp AndTail(Exp e0) :
{ Exp e1 = null, e2 = null; }
{
    [ <AND> e1=RelExpr() { e1 = new Binop(Binop.AND, e0, e1); } e2=AndTail(e1) ]
    { return e2==null ? e1 : e2; }
}

// RelExpr    -> ArithExpr [RelOp ArithExpr]
Exp RelExpr() :
{ Exp e1, e2 = null; int o; }
{
    e1=ArithExpr() [ o=Relop() e2=ArithExpr() { e2 = new Relop(o, e1, e2); }]
    { return e2==null ? e1 : e2; }
}

// ArithExpr -> Term ArithTail
Exp ArithExpr() :
{ Exp e1, e2 = null; }
{
    e1=Term() e2=ArithTail(e1)
    { return e2==null ? e1 : e2; }
}

// ArithTail    -> [ PlusMinusOp Term ArithTail ]
Exp ArithTail(Exp e0) :
{ Exp e1 = null, e2 = null; int op; }
{
    [ op=PlusMinusOp()  e1=Term() { e1 = new Binop(op, e0, e1); } e2=ArithTail(e1) ]
    { return e2==null ? e1 : e2; }
}

// PlusMinusOp      -> "+" | "-"
int PlusMinusOp() :
{}
{
    <PLUS>
    { return Binop.ADD; }
|
    <MINUS>
    { return Binop.SUB; }
}

// Term         -> Factor TermTail
Exp Term() :
{ Exp e1, e2 = null; }
{
    e1=Factor() e2=TermTail(e1)
    { return e2==null ? e1 : e2; }
}

// TermTail -> [ MultDivideOp Factor TermTail ]
Exp TermTail(Exp e0) :
{ Exp e1 = null, e2 = null; int op; }
{
    [ op=MultDivideOp()  e1=Factor() { e1 = new Binop(op, e0, e1); } e2=TermTail(e1) ]
    { return e2==null ? e1 : e2; }
}

// MultDivideOp     -> "*" | "/"
int MultDivideOp() :
{}
{
    <MULTIPLY>
    { return Binop.MUL; }
|
    <DIVIDE>
    { return Binop.DIV; }
}

// Factor     -> Unop Factor
//            |  "(" Expr ")"
//            |  Lvalue ['.' "length" '(' ')' | '(' [Args] ')']
//            |  Literal
Exp Factor() :
{
    int op;
    Exp e1 = null;
    ExpList el = null;
    boolean isLength = false;
    boolean isCall = false;
}
{
    op=Unop() e1=Factor() { e1 = new Unop(op, e1); }
    { return e1; }
|
    <LPAREN> e1=Expr() <RPAREN>
    { return e1; }
|
    e1=Lvalue() [ <LPAREN> [ el=Args() ] <RPAREN> { isCall = true; }
    |
    <PERIOD> <LENGTH> <LPAREN> <RPAREN> { isLength = true; }]
    {
        if (isCall)
        {
            if (e1 instanceof Field)
            {
                Field eField = (Field) e1;
                return new Call(eField.obj, eField.var, el);
            }
            else if (e1 instanceof Id)
            {
                Id eId = (Id) e1;
                return new Call(new This(), eId, el);
            }
            else return null;
        }
        else if (isLength)
            return new ArrayLen(e1);
        else return e1;
    }
|
    e1=Literal()
    { return e1; }
}

// Lvalue     -> ["this" "."] <ID> {"." <ID>} ["[" Expr "]"]
Exp Lvalue() :
{
    boolean isThis = false; 
    Exp e = null; 
    Id i = null; 
    Token tkn; 
    Field f = null;
}
{
    [ <THIS> <PERIOD>{ isThis = true; } ] tkn=<ID> 
    { 
        if (isThis)
            f = new Field(new This(), new Id(tkn.toString()));
        else
            i = new Id(tkn.toString());
    }
    ( LOOKAHEAD(2) <PERIOD> <ID>
    { 
        if (f == null)
            f = new Field(i, new Id(tkn.toString()));
        else
            f = new Field(f, new Id(tkn.toString()));
    }
        )* [ <LBRACKET> e = Expr() <RBRACKET> ]
        {
            if (e != null)
            {
                if (f != null)
                    return new ArrayElm(f, e);
                else return new ArrayElm(i, e);
            }
            else
            {
                if(f != null)
                    return f;
                else
                    return i;
            }
        }
}

// Literal    -> <INTVAL> | <FLOATVAL> | "true" | "false"
Exp Literal() :
{Token tkn; Exp e;}
{
    tkn=<INTVAL>{ e = new IntVal(Integer.parseInt(tkn.toString())); }
    { return e; }
|
    tkn=<REAL>{ e = new FloatVal(Float.parseFloat(tkn.toString())); }
    { return e; }
|
    tkn=<TRUE>{ e = new BoolVal(Boolean.parseBoolean(tkn.toString())); }
    { return e; }
|
    tkn=<FALSE>{ e = new BoolVal(Boolean.parseBoolean(tkn.toString())); }
    { return e; }
}

// Relop    -> "==" | "!=" | "<" | "<=" | ">" | ">="
int Relop() :
{}
{
    <EQUAL>
    { return Relop.EQ; }
|
    <NOT_EQUAL>
    { return Relop.NE; }
|
    <LESS_THAN>
    { return Relop.LT; }
|
    <LESS_THAN_OR_EQUAL>
    { return Relop.LE; }
|
    <GREATER_THAN>
    { return Relop.GT; }
|
    <GREATER_THAN_OR_EQUAL>
    { return Relop.GE; }
}


// Unop       -> "-" | "!"
int Unop() :
{}
{
    <MINUS>
    { return Unop.NEG; }
|
    <NOT>
    { return Unop.NOT; }
}
