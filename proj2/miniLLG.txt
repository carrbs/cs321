--
Benjamin Carr
Oct 25 2011
CS321 - Prof. Li
(miniLLG.txt)
--

The first (incorrect) draft is what I came up with before trying to code. Once I ran
into actual compile issues (etc.) I made a second (correct) draft (below first draft).


-------------------
FIRST DRAFT (INCORRECT):
-------------------

Program    -> ClassDecl {ClassDecl}
ClassDecl  -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
MethodDecl -> "public" Type <ID> "(" [Formals] ")" MethodBody
           |  "public" "void" <ID> "(" [Formals] ")" MethodBody
           |  "public" "static" "void" "main" "(" "String" "[" "]" <ID> ")"
                       MethodBody
MethodBody -> "{" {VarDecl} {Statement} "}"
Formals    -> Type <ID> {"," Type <ID>}
VarDecl    -> Type <ID> ["=" InitExpr] ";"
Type       -> BasicType ["[" "]"] | <ID>
BasicType  -> "int" | "float" | "boolean"
Statement  -> "{" {Statement} "}"
           |  Lvalue "=" InitExpr ";"
           |  Lvalue "(" [Args] ")" ";"
           |  "if" "(" Expr ")" Statement ["else" Statement]
           |  "while" "(" Expr ")" Statement
           |  "System.out.println" "(" [Expr | <STRVAL>] ")" ";"
           |  "return" [Expr] ";"
Args       -> Expr {"," Expr}
InitExpr   -> "new" BasicType "[" <INTVAL> "]"
           |  "new" <ID> "(" [Args] ")"
           |  Expr
Expr       -> Expr "||" AndExpr
           |  AndExpr
AndExpr    -> AndExpr "&&" RelExpr
           |  RelExpr
RelExpr    -> RelExpr Relop ArithExpr
           |  ArithExpr
ArithExpr  -> ArithExpr "+" Term
           |  ArithExpr "-" Term
           |  Term
Term       -> Term "*" Factor
           |  Term "/" Factor
           |  Factor
Factor     -> Unop Factor
           |  "(" Expr ")"
           |  Lvalue "(" [Args] ")"
           |  Lvalue "." "length" "(" ")"
           |  Lvalue
           |  Literal
Lvalue     -> ["this" "."] <ID> {"." <ID>} ["[" Expr "]"]
Literal    -> <INTVAL> | <FLOATVAL> | "true" | "false"
Relop      -> "==" | "!=" | "<" | "<=" | ">" | ">="
Unop       -> "-" | "!"

-------------------
SECOND DRAFT (CORRECT):
-------------------

Program    -> ClassDecl {ClassDecl}
ClassDecl  -> "class" <ID> ["extends" <ID>] "{" {VarDecl} {MethodDecl} "}"
PublicMethodDecl -> "public" MethodDecl
MethodDecl -> Type <ID> "(" [Formals] ")" MethodBody
           |  "void" <ID> "(" [Formals] ")" MethodBody
           |  "static" "void" "main" "(" "String" "[" "]" <ID> ")"
                       MethodBody
MethodBody -> "{" {VarDecl} {Statement} "}"
Formals    -> Type <ID> {"," Type <ID>}
VarDecl    -> Type <ID> ["=" InitExpr] ";"
Type       -> BasicType ["[" "]"] | <ID>
BasicType  -> "int" | "float" | "boolean"
Statement  -> "{" {Statement} "}"
           |  Lvalue LvalueStatement
           |  "if" "(" Expr ")" Statement ["else" Statement]
           |  "while" "(" Expr ")" Statement
           |  "System.out.println" "(" [Expr | <STRVAL>] ")" ";"
           |  "return" [Expr] ";"
LvalueStatement      -> "=" InitExpr ";"
                     |  "(" [Args] ")" ";"
Args       -> Expr {"," Expr}
InitExpr   -> "new" NewIntExpr
           |  Expr
NewInitExpr  -> BasicType "[" <INTVAL> "]"
             |  <ID> "(" [Args] ")"
Expr         -> AndExpr OrTail
OrTail       -> [ "||"  AndExpr OrTail ]
AndExpr    -> RelExpr AndTail
AndTail()    -> [ "&&" RelExpr AndTail ]
RelExpr      -> ArithExpr RelTail
RelTail      -> [ Relop ArithExpr ]
ArithExpr -> Term ArithTail
ArithTail    -> [ PlusMinusOp Term ArithTail ]
PlusMinusOp      -> "+" | "-"
Term         -> Factor TermTail
TermTail -> [ MultDivideOp Factor TermTail ]
MultDivideOp     -> "*" | "/"
Factor     -> Unop Factor
           |  "(" Expr ")"
           |  Lvalue [ LvalueFactor ]
           |  Literal
LvalueFactor    -> "(" [Args] ")"
                 |  "." "length" "(" ")"
Lvalue     -> ["this" "."] <ID> {"." <ID>} ["[" Expr "]"]
Literal    -> <INTVAL> | <FLOATVAL> | "true" | "false"
Relop    -> "==" | "!=" | "<" | "<=" | ">" | ">="
Unop       -> "-" | "!"
